import{_ as i,c as a,o as n,ae as p}from"./chunks/framework.CgiyRsxg.js";const l="/NukkitLearn-WebDocs/assets/5-01.DKuorNxi.png",t="/NukkitLearn-WebDocs/assets/5-02.B1xR-vBR.png",e="/NukkitLearn-WebDocs/assets/5-03.DEbXUVNe.png",h="/NukkitLearn-WebDocs/assets/5-04.CODgYB5I.png",u=JSON.parse('{"title":"第一章 第五节 如何编写配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"第一章/1-5_如何使用配置文件.md","filePath":"第一章/1-5_如何使用配置文件.md"}'),k={name:"第一章/1-5_如何使用配置文件.md"};function E(r,s,g,d,c,o){return n(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="第一章-第五节-如何编写配置文件" tabindex="-1">第一章 第五节 如何编写配置文件 <a class="header-anchor" href="#第一章-第五节-如何编写配置文件" aria-label="Permalink to &quot;第一章 第五节 如何编写配置文件&quot;">​</a></h1><p>参与编写者: MagicLu550</p><h4 id="建议学习时间-40分钟" tabindex="-1">建议学习时间: 40分钟 <a class="header-anchor" href="#建议学习时间-40分钟" aria-label="Permalink to &quot;建议学习时间: 40分钟&quot;">​</a></h4><h5 id="学习要点-了解如何创建配置文件-了解使用simpleconfig" tabindex="-1">学习要点: 了解如何创建配置文件，了解使用SimpleConfig <a class="header-anchor" href="#学习要点-了解如何创建配置文件-了解使用simpleconfig" aria-label="Permalink to &quot;学习要点: 了解如何创建配置文件，了解使用SimpleConfig&quot;">​</a></h5><p>配置文件用于存储插件的配置信息，供用户自定义和修改，以及存储一些永久数据，我们称 配置文件属于 <strong>持久层</strong>。</p><p>nukkit提供了多种配置文件格式，如yaml,json,properties等，其中最常用的是yaml, 我们主要讲解这个配置文件格式，其他如果想要了解，可以发送issues，我们可以补充。</p><p>一. 关于yaml</p><p>nukkit的yaml框架基于<a href="https://github.com/bmoliveira/snake-yaml" target="_blank" rel="noreferrer">snakeYaml</a>实现的, snakeYaml是一款使用广泛的yaml解析库,我们可以从它的<a href="https://yaml.org/type/index.html" target="_blank" rel="noreferrer">官网</a>了解 他们的语法，在nukkit开发中，我们更多使用key: value的映射形式</p><p>这是一个yaml的文件案例</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> player</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nihao</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xiaoming</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xiaogang</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2019</span></span></code></pre></div><p>yaml的标准语法是使用空格来划分级别，前面为键，后面为值，且值和冒号之间有空格， 虽然yaml的语法不止如此简单，但是我们最常用的也就这些很简单的东西。</p><p>yaml的数组有两个表示形式</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">array1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#yaml的注释</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">array2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#yaml不允许有重复的键</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">array3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><p>如果还要了解其他，可以上yaml官网查看他们语法，这里只讲解这些语法</p><p>二. 如何使用nukkit的配置文件库</p><p>原本的snakeYaml使用起来比较复杂，因此nukkit官方提供了简化,同一 使用Config对象来表达和操作。</p><p>使用默认的配置</p><p>默认配置文件为config.yml,可以通过saveDefaultConfig()方法来实现， 前提是你的resources下面要创建一个config.yml,这个方法会默认在 plugins/\${你的插件名字}下创建一个config.yml,并且会把resources下面的那个 config.yml内容复制过来. <img src="`+l+'" alt="5-01"> 之后我们调用这个方法即可 <img src="'+t+'" alt="5-02"> 我们这里打开一个服务器，做一个实验可以看看,插件名为FirstPlugin <img src="'+e+'" alt="5-03"> 我们插件被加载成功,我们看看我们的文件夹 <img src="'+h+`" alt="5-04"> 发现.../plugins/FirstPlugin下面出现了一模一样的config.yml</p><p>使用自定义的配置</p><p>自定义配置有两种方式，一种是已经初始化的文件，一种是空白文件，元素后期添加</p><ol><li>初始化的文件 saveResource(String fileName, boolean replace)</li></ol><p>第一个是文件名称，默认是this.getDataFolder()+&quot;/&quot;+fileName的路径 getDataFolder()为.../plugins/你的插件名 ,不包含后面的&quot;/&quot;,使用时记得注意 假如你的插件名称为abc,那么路径为.../plugins/abc</p><p>第二个是是否替换文件，每次重新启动服务器时，会把文件内容重新更新，如果为false, 则不会更新。或者已经存在config，将不会换掉。如果为true，那么就会换掉它。之前修改 的内容就会被替换(实际上加了true就是把文件删掉重新创建一遍)</p><p>而文件初始化的来源和之前的config.yml一样，我们可以看看saveDefaultConfig()源码会发现， 它的本质也是saveResource</p><p>PluginBase.java</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void saveDefaultConfig() {</span></span>
<span class="line"><span>        if (!this.configFile.exists()) {</span></span>
<span class="line"><span>            this.saveResource(&quot;config.yml&quot;, false);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span></code></pre></div><ol start="2"><li>空白文件 空白文件的文件默认没有getDataFolder(),它的默认路径是和nukkit.jar同一级别的文件目录.</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Config config = new Config(this.getDataFolder()+&quot;/myConfig.yml&quot;,Config.YAML);</span></span>
<span class="line"><span>config.save();//保存文件,文件不存在就会创建</span></span></code></pre></div><p>Config可以实现对文件的操作,例如先前的config.yml,我们想对其实现操作,可以</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Config config = new Config(this.getDataFolder()+&quot;/config.yml&quot;,Config.YAML);</span></span>
<span class="line"><span>config.set(&quot;me&quot;,&quot;12&quot;);//将me修改为12,如果me不存在将创建me</span></span>
<span class="line"><span>config.save();</span></span></code></pre></div><p>当然值得注意，每次重新运行，set都会修改一次me,所以如果手动修改了me，就会被还原。 所以你可以做一个条件判断来避免还原的问题，比如判断文件是否存在。 当然这是初始化文件出现的问题，我还是建议初始化文件使用saveResource来初始化</p><p>Config的常用方法 1.构造方法</p><p>我们可以看官方源码</p><p>Config.java</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span>     * Constructor for Config instance with undefined file object</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param type - Config type</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public Config(int type) {</span></span>
<span class="line"><span>        this.type = type;</span></span>
<span class="line"><span>        this.correct = true;</span></span>
<span class="line"><span>        this.config = new ConfigSection();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Constructor for Config (YAML) instance with undefined file object</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public Config() {</span></span>
<span class="line"><span>        this(Config.YAML);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Config(String file) {</span></span>
<span class="line"><span>        this(file, Config.DETECT);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Config(File file) {</span></span>
<span class="line"><span>        this(file.toString(), Config.DETECT);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Config(String file, int type) {</span></span>
<span class="line"><span>        this(file, type, new ConfigSection());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Config(File file, int type) {</span></span>
<span class="line"><span>        this(file.toString(), type, new ConfigSection());</span></span>
<span class="line"><span>    }</span></span></code></pre></div><p>file为文件名称，默认路径为nukkit的根目录 type为类型，主要使用的类型是</p><p>Config.java</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> public static final int DETECT = -1; //Detect by file extension</span></span>
<span class="line"><span>    public static final int PROPERTIES = 0; // .properties</span></span>
<span class="line"><span>    public static final int CNF = Config.PROPERTIES; // .cnf</span></span>
<span class="line"><span>    public static final int JSON = 1; // .js, .json</span></span>
<span class="line"><span>    public static final int YAML = 2; // .yml, .yaml</span></span>
<span class="line"><span>    //public static final int EXPORT = 3;</span><span> // .export, .xport</span></span>
<span class="line"><span>    //public static final int SERIALIZED = 4;</span><span> // .sl</span></span>
<span class="line"><span>    public static final int ENUM = 5; // .txt, .list, .enum</span></span>
<span class="line"><span>    public static final int ENUMERATION = Config.ENUM;</span></span></code></pre></div><p>我们主要使用yaml,json.properties,其他大家可以自行查询。</p><p>如何实现动态内容</p><p>比如一些插件可以这样做</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${player}加入了信息</span></span></code></pre></div><p>其实可以使用replace做到</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net.noyark.www;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cn.nukkit.event.EventHandler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cn.nukkit.event.Listener;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cn.nukkit.event.player.PlayerJoinEvent;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OtherListener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Listener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EventHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onPLayerJoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PlayerJoinEvent </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String message;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取到内容后...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${player}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPlayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当然我们也可以基于反射做一个简单的解析工具</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] vals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;player&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Map map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;player&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getAddress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Event </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Map.Entry&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; e1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entries){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,46)])])}const F=i(k,[["render",E]]);export{u as __pageData,F as default};
